#BlueJ class context
comment0.params=widthGiven\ heightGiven
comment0.target=WindowedGraphics(int,\ int)
comment1.params=
comment1.target=void\ setXscale()
comment1.text=\n\ Set\ the\ x-scale\ to\ be\ the\ default\ (between\ 0.0\ and\ 1.0).\n
comment10.params=x
comment10.target=double\ userX(double)
comment11.params=y
comment11.target=double\ userY(double)
comment12.params=
comment12.target=void\ setPenRadius()
comment13.params=size
comment13.target=void\ setPenRadius(double)
comment14.params=
comment14.target=void\ setPenColour()
comment15.params=red\ green\ blue
comment15.target=void\ setPenColor(int,\ int,\ int)
comment16.params=colour
comment16.target=void\ setPenColour(java.awt.Color)
comment17.params=
comment17.target=java.awt.Color\ getPenColour()
comment18.params=
comment18.target=void\ setFont()
comment19.params=f
comment19.target=void\ setFont(java.awt.Font)
comment2.params=
comment2.target=void\ setYscale()
comment2.text=\n\ Set\ the\ y-scale\ to\ be\ the\ default\ (between\ 0.0\ and\ 1.0).\n
comment20.params=
comment20.target=void\ setSize()
comment21.params=width\ height
comment21.target=void\ setSize(int,\ int)
comment22.params=title
comment22.target=void\ setTitle(java.lang.String)
comment23.params=
comment23.target=void\ clear()
comment24.params=color
comment24.target=void\ clear(java.awt.Color)
comment25.params=t
comment25.target=void\ show(int)
comment25.text=\n\ Display\ on\ screen,\ pause\ for\ t\ milliseconds,\ and\ turn\ on\n\ <em>animation\ mode</em>\:\ subsequent\ calls\ to\n\ drawing\ methods\ such\ as\ <tt>line()</tt>,\ <tt>circle()</tt>,\ and\ <tt>square()</tt>\n\ will\ not\ be\ displayed\ on\ screen\ until\ the\ next\ call\ to\ <tt>show()</tt>.\n\ This\ is\ useful\ for\ producing\ animations\ (clear\ the\ screen,\ draw\ a\ bunch\ of\ shapes,\n\ display\ on\ screen\ for\ a\ fixed\ amount\ of\ time,\ and\ repeat).\ It\ also\ speeds\ up\n\ drawing\ a\ huge\ number\ of\ shapes\ (call\ <tt>show(0)</tt>\ to\ defer\ drawing\n\ on\ screen,\ draw\ the\ shapes,\ and\ call\ <tt>show(0)</tt>\ to\ display\ them\ all\n\ on\ screen\ at\ once).\n\ @param\ t\ number\ of\ milliseconds\n
comment26.params=
comment26.target=void\ show()
comment26.text=\n\ Display\ on-screen\ and\ turn\ off\ animation\ mode\:\n\ subsequent\ calls\ to\n\ drawing\ methods\ such\ as\ <tt>line()</tt>,\ <tt>circle()</tt>,\ and\ <tt>square()</tt>\n\ will\ be\ displayed\ on\ screen\ when\ called.\ This\ is\ the\ default.\n
comment27.params=
comment27.target=void\ draw()
comment28.params=
comment28.target=boolean\ exists()
comment28.text=\n\ \n\ @return\ whether\ the\ current\ frame\ exists\n
comment29.params=
comment29.target=void\ close()
comment29.text=\n\ Closes\ the\ window\n
comment3.params=max
comment3.target=void\ setXscale(double)
comment3.text=\n\ @param\ max\ the\ maximum\ value\ of\ the\ x-scale\n
comment30.params=
comment30.target=javax.swing.JFrame\ getFrame()
comment30.text=\n\ @return\ the\ frame\ that\ is\ being\ used\ by\ this\ window\n
comment31.params=x0\ y0\ x1\ y1
comment31.target=void\ line(double,\ double,\ double,\ double)
comment31.text=\n\ Draw\ a\ line\ from\ (x0,\ y0)\ to\ (x1,\ y1).\n\ @param\ x0\ the\ x-coordinate\ of\ the\ starting\ point\n\ @param\ y0\ the\ y-coordinate\ of\ the\ starting\ point\n\ @param\ x1\ the\ x-coordinate\ of\ the\ destination\ point\n\ @param\ y1\ the\ y-coordinate\ of\ the\ destination\ point\n
comment32.params=x\ y
comment32.target=void\ pixel(double,\ double)
comment32.text=\n\ Draw\ one\ pixel\ at\ (x,\ y).\n\ @param\ x\ the\ x-coordinate\ of\ the\ pixel\n\ @param\ y\ the\ y-coordinate\ of\ the\ pixel\n
comment33.params=x\ y
comment33.target=void\ point(double,\ double)
comment33.text=\n\ Draw\ a\ point\ at\ (x,\ y).\n\ @param\ x\ the\ x-coordinate\ of\ the\ point\n\ @param\ y\ the\ y-coordinate\ of\ the\ point\n
comment34.params=x\ y\ r
comment34.target=void\ circle(double,\ double,\ double)
comment34.text=\n\ Draw\ a\ circle\ of\ radius\ r,\ centered\ on\ (x,\ y).\n\ @param\ x\ the\ x-coordinate\ of\ the\ center\ of\ the\ circle\n\ @param\ y\ the\ y-coordinate\ of\ the\ center\ of\ the\ circle\n\ @param\ r\ the\ radius\ of\ the\ circle\n\ @throws\ IllegalArgumentException\ if\ the\ radius\ of\ the\ circle\ is\ negative\n
comment35.params=x\ y\ r
comment35.target=void\ filledCircle(double,\ double,\ double)
comment35.text=\n\ Draw\ filled\ circle\ of\ radius\ r,\ centered\ on\ (x,\ y).\n\ @param\ x\ the\ x-coordinate\ of\ the\ center\ of\ the\ circle\n\ @param\ y\ the\ y-coordinate\ of\ the\ center\ of\ the\ circle\n\ @param\ r\ the\ radius\ of\ the\ circle\n\ @throws\ IllegalArgumentException\ if\ the\ radius\ of\ the\ circle\ is\ negative\n
comment36.params=x\ y\ semiMajorAxis\ semiMinorAxis
comment36.target=void\ ellipse(double,\ double,\ double,\ double)
comment36.text=\n\ Draw\ an\ ellipse\ with\ given\ semimajor\ and\ semiminor\ axes,\ centered\ on\ (x,\ y).\n\ @param\ x\ the\ x-coordinate\ of\ the\ center\ of\ the\ ellipse\n\ @param\ y\ the\ y-coordinate\ of\ the\ center\ of\ the\ ellipse\n\ @param\ semiMajorAxis\ is\ the\ semimajor\ axis\ of\ the\ ellipse\n\ @param\ semiMinorAxis\ is\ the\ semiminor\ axis\ of\ the\ ellipse\n\ @throws\ IllegalArgumentException\ if\ either\ of\ the\ axes\ are\ negative\n
comment37.params=x\ y\ semiMajorAxis\ semiMinorAxis
comment37.target=void\ filledEllipse(double,\ double,\ double,\ double)
comment37.text=\n\ Draw\ an\ ellipse\ with\ given\ semimajor\ and\ semiminor\ axes,\ centered\ on\ (x,\ y).\n\ @param\ x\ the\ x-coordinate\ of\ the\ center\ of\ the\ ellipse\n\ @param\ y\ the\ y-coordinate\ of\ the\ center\ of\ the\ ellipse\n\ @param\ semiMajorAxis\ is\ the\ semimajor\ axis\ of\ the\ ellipse\n\ @param\ semiMinorAxis\ is\ the\ semiminor\ axis\ of\ the\ ellipse\n\ @throws\ IllegalArgumentException\ if\ either\ of\ the\ axes\ are\ negative\n
comment38.params=x\ y\ r\ angle1\ angle2
comment38.target=void\ arc(double,\ double,\ double,\ double,\ double)
comment38.text=\n\ Draw\ an\ arc\ of\ radius\ r,\ centered\ on\ (x,\ y),\ from\ angle1\ to\ angle2\ (in\ degrees).\n\ @param\ x\ the\ x-coordinate\ of\ the\ center\ of\ the\ circle\n\ @param\ y\ the\ y-coordinate\ of\ the\ center\ of\ the\ circle\n\ @param\ r\ the\ radius\ of\ the\ circle\n\ @param\ angle1\ the\ starting\ angle.\ 0\ would\ mean\ an\ arc\ beginning\ at\ 3\ o'clock.\n\ @param\ angle2\ the\ angle\ at\ the\ end\ of\ the\ arc.\ For\ example,\ if\n\ \ \ \ \ \ \ \ you\ want\ a\ 90\ degree\ arc,\ then\ angle2\ should\ be\ angle1\ +\ 90.\n\ @throws\ IllegalArgumentException\ if\ the\ radius\ of\ the\ circle\ is\ negative\n
comment39.params=x\ y\ r
comment39.target=void\ square(double,\ double,\ double)
comment39.text=\n\ Draw\ a\ square\ of\ side\ length\ 2r,\ centered\ on\ (x,\ y).\n\ @param\ x\ the\ x-coordinate\ of\ the\ center\ of\ the\ square\n\ @param\ y\ the\ y-coordinate\ of\ the\ center\ of\ the\ square\n\ @param\ r\ radius\ is\ half\ the\ length\ of\ any\ side\ of\ the\ square\n\ @throws\ IllegalArgumentException\ if\ r\ is\ negative\n
comment4.params=max
comment4.target=void\ setYscale(double)
comment4.text=\n\ @param\ max\ the\ maximum\ value\ of\ the\ y-scale\n
comment40.params=x\ y\ r
comment40.target=void\ filledSquare(double,\ double,\ double)
comment40.text=\n\ Draw\ a\ filled\ square\ of\ side\ length\ 2r,\ centered\ on\ (x,\ y).\n\ @param\ x\ the\ x-coordinate\ of\ the\ center\ of\ the\ square\n\ @param\ y\ the\ y-coordinate\ of\ the\ center\ of\ the\ square\n\ @param\ r\ radius\ is\ half\ the\ length\ of\ any\ side\ of\ the\ square\n\ @throws\ IllegalArgumentException\ if\ r\ is\ negative\n
comment41.params=x\ y\ halfWidth\ halfHeight
comment41.target=void\ rectangle(double,\ double,\ double,\ double)
comment41.text=\n\ Draw\ a\ rectangle\ of\ given\ half\ width\ and\ half\ height,\ centered\ on\ (x,\ y).\n\ @param\ x\ the\ x-coordinate\ of\ the\ center\ of\ the\ rectangle\n\ @param\ y\ the\ y-coordinate\ of\ the\ center\ of\ the\ rectangle\n\ @param\ halfWidth\ is\ half\ the\ width\ of\ the\ rectangle\n\ @param\ halfHeight\ is\ half\ the\ height\ of\ the\ rectangle\n\ @throws\ IllegalArgumentException\ if\ halfWidth\ or\ halfHeight\ is\ negative\n
comment42.params=x\ y\ halfWidth\ halfHeight
comment42.target=void\ filledRectangle(double,\ double,\ double,\ double)
comment42.text=\n\ Draw\ a\ filled\ rectangle\ of\ given\ half\ width\ and\ half\ height,\ centered\ on\ (x,\ y).\n\ @param\ x\ the\ x-coordinate\ of\ the\ center\ of\ the\ rectangle\n\ @param\ y\ the\ y-coordinate\ of\ the\ center\ of\ the\ rectangle\n\ @param\ halfWidth\ is\ half\ the\ width\ of\ the\ rectangle\n\ @param\ halfHeight\ is\ half\ the\ height\ of\ the\ rectangle\n\ @throws\ IllegalArgumentException\ if\ halfWidth\ or\ halfHeight\ is\ negative\n
comment43.params=x\ y
comment43.target=void\ polygon(double[],\ double[])
comment43.text=\n\ Draw\ a\ polygon\ with\ the\ given\ (x[i],\ y[i])\ coordinates.\n\ @param\ x\ an\ array\ of\ all\ the\ x-coordindates\ of\ the\ polygon\n\ @param\ y\ an\ array\ of\ all\ the\ y-coordindates\ of\ the\ polygon\n
comment44.params=x\ y
comment44.target=void\ filledPolygon(double[],\ double[])
comment44.text=\n\ Draw\ a\ filled\ polygon\ with\ the\ given\ (x[i],\ y[i])\ coordinates.\n\ @param\ x\ an\ array\ of\ all\ the\ x-coordindates\ of\ the\ polygon\n\ @param\ y\ an\ array\ of\ all\ the\ y-coordindates\ of\ the\ polygon\n
comment45.params=filename
comment45.target=java.awt.Image\ getImage(java.lang.String)
comment45.text=\n\ \ Drawing\ images.\n
comment46.params=x\ y\ s
comment46.target=void\ picture(double,\ double,\ java.lang.String)
comment46.text=\n\ Draw\ picture\ (gif,\ jpg,\ or\ png)\ centered\ on\ (x,\ y).\n\ @param\ x\ the\ center\ x-coordinate\ of\ the\ image\n\ @param\ y\ the\ center\ y-coordinate\ of\ the\ image\n\ @param\ s\ the\ name\ of\ the\ image/picture,\ e.g.,\ "ball.gif"\n\ @throws\ IllegalArgumentException\ if\ the\ image\ is\ corrupt\n
comment47.params=x\ y\ s\ w\ h
comment47.target=void\ picture(double,\ double,\ java.lang.String,\ double,\ double)
comment47.text=\n\ Draw\ picture\ (gif,\ jpg,\ or\ png)\ centered\ on\ (x,\ y),\ rescaled\ to\ w-by-h.\n\ @param\ x\ the\ center\ x\ coordinate\ of\ the\ image\n\ @param\ y\ the\ center\ y\ coordinate\ of\ the\ image\n\ @param\ s\ the\ name\ of\ the\ image/picture,\ e.g.,\ "ball.gif"\n\ @param\ w\ the\ width\ of\ the\ image\n\ @param\ h\ the\ height\ of\ the\ image\n\ @throws\ IllegalArgumentException\ if\ the\ width\ height\ are\ negative\n\ @throws\ IllegalArgumentException\ if\ the\ image\ is\ corrupt\n
comment48.params=x\ y\ s
comment48.target=void\ text(double,\ double,\ java.lang.String)
comment48.text=\n\ Write\ the\ given\ text\ string\ in\ the\ current\ font,\ centered\ on\ (x,\ y).\n\ @param\ x\ the\ center\ x-coordinate\ of\ the\ text\n\ @param\ y\ the\ center\ y-coordinate\ of\ the\ text\n\ @param\ s\ the\ text\n
comment49.params=x\ y\ s
comment49.target=void\ textLeft(double,\ double,\ java.lang.String)
comment49.text=\n\ Write\ the\ given\ text\ string\ in\ the\ current\ font,\ left-aligned\ at\ (x,\ y).\n\ @param\ x\ the\ x-coordinate\ of\ the\ text\n\ @param\ y\ the\ y-coordinate\ of\ the\ text\n\ @param\ s\ the\ text\n
comment5.params=min\ max
comment5.target=void\ setScale(double,\ double)
comment5.text=\n\ Set\ the\ x-scale\ and\ y-scale\n\ @param\ min\ the\ minimum\ value\ of\ the\ x-\ and\ y-scales\n\ @param\ max\ the\ maximum\ value\ of\ the\ x-\ and\ y-scales\n
comment50.params=
comment50.target=double\ mouseX()
comment50.text=\n\ \ \ \ \ \ \ Mouse\ stuff\n
comment51.params=
comment51.target=double\ mouseY()
comment52.params=
comment52.target=boolean\ isMousePressed()
comment53.params=arg0
comment53.target=void\ mouseClicked(java.awt.event.MouseEvent)
comment54.params=arg0
comment54.target=void\ mouseEntered(java.awt.event.MouseEvent)
comment55.params=arg0
comment55.target=void\ mouseExited(java.awt.event.MouseEvent)
comment56.params=arg0
comment56.target=void\ mousePressed(java.awt.event.MouseEvent)
comment57.params=arg0
comment57.target=void\ mouseReleased(java.awt.event.MouseEvent)
comment58.params=arg0
comment58.target=void\ mouseDragged(java.awt.event.MouseEvent)
comment59.params=arg0
comment59.target=void\ mouseMoved(java.awt.event.MouseEvent)
comment6.params=x
comment6.target=double\ scaleX(double)
comment60.params=
comment60.target=boolean\ hasNextKeyTyped()
comment60.text=\n\ Has\ the\ user\ typed\ a\ key?\n\ @return\ true\ if\ the\ user\ has\ typed\ a\ key,\ false\ otherwise\n
comment61.params=
comment61.target=char\ nextKeyTyped()
comment61.text=\n\ What\ is\ the\ next\ key\ that\ was\ typed\ by\ the\ user?\ This\ method\ returns\n\ a\ Unicode\ character\ corresponding\ to\ the\ key\ typed\ (such\ as\ 'a'\ or\ 'A').\n\ It\ cannot\ identify\ action\ keys\ (such\ as\ F1\n\ and\ arrow\ keys)\ or\ modifier\ keys\ (such\ as\ control).\n\ @return\ the\ next\ Unicode\ key\ typed\n
comment62.params=keycode
comment62.target=boolean\ isKeyPressed(int)
comment62.text=\n\ Is\ the\ keycode\ currently\ being\ pressed?\ This\ method\ takes\ as\ an\ argument\n\ the\ keycode\ (corresponding\ to\ a\ physical\ key).\ It\ can\ handle\ action\ keys\n\ (such\ as\ F1\ and\ arrow\ keys)\ and\ modifier\ keys\ (such\ as\ shift\ and\ control).\n\ See\ <a\ href\ \=\ "http\://download.oracle.com/javase/6/docs/api/java/awt/event/KeyEvent.html">KeyEvent.java</a>\n\ for\ a\ description\ of\ key\ codes.\n\ @return\ true\ if\ keycode\ is\ currently\ being\ pressed,\ false\ otherwise\n
comment63.params=e
comment63.target=void\ keyTyped(java.awt.event.KeyEvent)
comment63.text=\n\ This\ method\ cannot\ be\ called\ directly.\n
comment64.params=e
comment64.target=void\ keyPressed(java.awt.event.KeyEvent)
comment64.text=\n\ This\ method\ cannot\ be\ called\ directly.\n
comment65.params=e
comment65.target=void\ keyReleased(java.awt.event.KeyEvent)
comment65.text=\n\ This\ method\ cannot\ be\ called\ directly.\n
comment7.params=y
comment7.target=double\ scaleY(double)
comment8.params=w
comment8.target=double\ factorX(double)
comment9.params=h
comment9.target=double\ factorY(double)
numComments=66
